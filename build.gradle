defaultTasks 'clean', 'todo', 'build', 'compileTutorialJava', 'publishToMavenLocal', 'dist'

apply plugin: 'java'
apply plugin: 'maven-publish'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

repositories {
  mavenCentral()
}

sourceSets {
  tutorial {
    java.srcDir file('src/tutorial/java')
  }
}

dependencies {
  testCompile 'junit:junit:4.11'
  tutorialCompile sourceSets.main.output
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint"
}

jar {
  from "license.txt"
}

task sourcesJar(type: Jar) {
  from "license.txt"
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
  from javadoc.destinationDir
}

publishing {
  publications {
    maven(MavenPublication) {
      groupId 'ch.softappeal'
      pom.withXml {
        asNode().children().last() + {
          resolveStrategy = Closure.DELEGATE_FIRST
          packaging 'jar'
          name project.name
          description 'Yet Another Service Solution'
          url 'https://github.com/softappeal/yass'
          licenses {
            license { name 'The BSD 3-Clause License' }
          }
          scm { url 'https://github.com/softappeal/yass' }
          organization { name 'softappeal GmbH Switzerland' }
          developers {
            developer { name 'Angelo Salvade' }
          }
        }
      }
      from components.java
      artifact sourcesJar { classifier "sources" }
      artifact javadocJar { classifier "javadoc" }
    }
  }
}

task dist << {
  def name = "${project.name}-${version}"
  ant.copy(file: 'build/publications/maven/pom-default.xml', tofile: "build/publications/maven/${name}.pom")
  ant.zip(destfile: "build/${name}_dist.zip") {
    fileset(file: 'readme.md')
    fileset(file: 'license.txt')
    fileset(file: "build/publications/maven/${name}.pom")
    fileset(dir: 'build/libs')
    zipfileset(dir: 'src/tutorial', prefix: 'tutorial')
  }
}

def searchMarker(tree, divider1, divider2, title, marker) {
  println divider1
  println "= search: " + title
  tree.each { file ->
    def found = false
    def number = 0
    file.eachLine { line ->
      number++
      if (line.toLowerCase().contains(marker)) {
        if (!found) {
          println divider2
          println "+ " + file
        }
        found = true
        println "- " + number + ": " + line
      }
    }
  }
}

task todo << {
  def divider1 = "========================================================================================================================"
  def divider2 = "------------------------------------------------------------------------------------------------------------------------"
  def searchTree = fileTree(dir: '.').exclude('.git/').exclude('.gradle/').exclude('.idea/').exclude('build/').exclude('classes/')
  searchMarker(searchTree, divider1, divider2, 'abort', '$' + '$$')  // abort, not allowed for building a release
  searchMarker(searchTree, divider1, divider2, 'todo', '$' + 'todo') // under construction, yet a release can still be built
  searchMarker(searchTree, divider1, divider2, 'note', '$' + 'note') // important comment
  println divider1
}
